/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $ 
 *
 * $Id:$
 */
/*
 * standard Net-SNMP includes 
 */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include <stdlib.h>

/*
 * include our parent header 
 */
#include "channelTable.h"


#include "channelTable_data_access.h"

/** @ingroup interface
 * @addtogroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table channelTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * CE-SNMP-MIB::channelTable is subid 7 of tuner.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.38010.3.8.7, length: 10
 */

/**
 * initialization for channelTable data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param channelTable_reg
 *        Pointer to channelTable_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int
channelTable_init_data(channelTable_registration * channelTable_reg)
{
    UNUSED(channelTable_reg);
    DEBUGMSGTL(("verbose:channelTable:channelTable_init_data",
                "called\n"));

    /*
     * TODO:303:o: Initialize channelTable data.
     */
    /*
     ***************************************************
     ***             START EXAMPLE CODE              ***
     ***---------------------------------------------***/
    /*
     * if you are the sole writer for the file, you could
     * open it here. However, as stated earlier, we are assuming
     * the worst case, which in this case means that the file is
     * written to by someone else, and might not even exist when
     * we start up. So we can't do anything here.
     */
    /*
     ***---------------------------------------------***
     ***              END  EXAMPLE CODE              ***
     ***************************************************/

    return MFD_SUCCESS;
}                               /* channelTable_init_data */

/**
 * container overview
 *
 */

/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void
channelTable_container_init(netsnmp_container ** container_ptr_ptr,
                            netsnmp_cache *cache)
{
    DEBUGMSGTL(("verbose:channelTable:channelTable_container_init", "called\n"));

    if (NULL == container_ptr_ptr) {
        snmp_log(LOG_ERR,
                 "bad container param to channelTable_container_init\n");
        return;
    }

    *container_ptr_ptr = NULL;

    if (NULL == cache) {
        snmp_log(LOG_ERR,"bad cache param to channelTable_container_init\n");
        return;
    }

    /*
     * For advanced users, you can use a custom container. If you
     * do not create one, one will be created for you.
     */
    cache->timeout = CHANNELTABLE_CACHE_TIMEOUT;

}                               /* channelTable_container_init */

/**
 * container shutdown
 *
 * @param container_ptr A pointer to the container.
 *
 *  This function is called at shutdown to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases.
 *
 *  This function is called before channelTable_container_free().
 *
 * @remark
 *  This would also be a good place to do any cleanup needed
 *  for you data source. For example, closing a connection to another
 *  process that supplied the data, closing a database, etc.
 */
void
channelTable_container_shutdown(netsnmp_container * container_ptr)
{
    DEBUGMSGTL(("verbose:channelTable:channelTable_container_shutdown",
                "called\n"));

    if (NULL == container_ptr) {
        snmp_log(LOG_ERR,
                 "bad params to channelTable_container_shutdown\n");
        return;
    }

}                               /* channelTable_container_shutdown */

/**
 * load initial data
 *
 * TODO:350:M: Implement channelTable data load
 *
 * @param container container to which items should be inserted
 *
 * @retval MFD_SUCCESS              : success.
 * @retval MFD_RESOURCE_UNAVAILABLE : Can't access data source
 * @retval MFD_ERROR                : other error.
 *
 *  This function is called to load the index(es) (and data, optionally)
 *  for the every row in the data set.
 *
 * @remark
 *  While loading the data, the only important thing is the indexes.
 *  If access to your data is cheap/fast (e.g. you have a pointer to a
 *  structure in memory), it would make sense to update the data here.
 *  If, however, the accessing the data invovles more work (e.g. parsing
 *  some other existing data, or peforming calculations to derive the data),
 *  then you can limit yourself to setting the indexes and saving any
 *  information you will need later. Then use the saved information in
 *  channelTable_row_prep() for populating data.
 *
 * @note
 *  If you need consistency between rows (like you want statistics
 *  for each row to be from the same time frame), you should set all
 *  data here.
 *
 */
int
channelTable_container_load(netsnmp_container * container)
{
    channelTable_rowreq_ctx *rowreq_ctx;

    char programID[256] = "programID";

    int i, channelIndex = 0, channelNumber = 0, subChannelCount = 0;

    DEBUGMSGTL(("verbose:channelTable:channelTable_container_load", "called\n"));

    int iArray, ret;
    const char *p;
#if 1
    const char **pArray;
    if (DBus_getProperty(SPBus_ControlCenter_UiSrv, "getChannelTable", NULL, 
                         DBUS_TYPE_INT32, &ret,
                         DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &pArray, &iArray,
                         DBUS_TYPE_INVALID) != 0) {
        printf("failed1: getChannelTable: ret=%d, count=%d\n", ret, iArray);
        return MFD_RESOURCE_UNAVAILABLE;
    }
    if (ret != 0 && ret != 192) {
        printf("failed2: getChannelTable: ret=%d, count=%d\n", ret, iArray);
        return MFD_RESOURCE_UNAVAILABLE;
    }
#else
    const char *Array[] = {"0 1 2 0x10", "1 3 4 0x20"};
    const char **pArray = Array;
    iArray = 2;
    printf("getChannelTable: count=%d\n", iArray);
#endif

    for (i = 0; i < iArray; i++) {
        p = *(pArray + i);
        ret = sscanf(p, "%d%d%d%s", &channelIndex, &channelNumber, &subChannelCount, &programID[0]);
        if (ret != 4) {
            printf("ERROR: sscanf '%s'\n", p);
            continue;
        }
        printf("channelIndex=%d, channelNumber=%d, subChannelCount=%d, programID='%s'\n",
               channelIndex, channelNumber, subChannelCount, programID);

        /*
         * TODO:352:M: |   |-> set indexes in new channelTable rowreq context.
         * data context will be set from the param (unless NULL,
         *      in which case a new data context will be allocated)
         */
        rowreq_ctx = channelTable_allocate_rowreq_ctx(NULL);
        if (NULL == rowreq_ctx) {
            snmp_log(LOG_ERR, "memory allocation failed\n");
            return MFD_RESOURCE_UNAVAILABLE;
        }
        if (MFD_SUCCESS != channelTable_indexes_set(rowreq_ctx, i)) {
            snmp_log(LOG_ERR, "error setting index while loading channelTable data.\n");
            channelTable_release_rowreq_ctx(rowreq_ctx);
            continue;
        }

        rowreq_ctx->data.channelIndex    = channelIndex;
        rowreq_ctx->data.channelNumber   = channelNumber;
        rowreq_ctx->data.subChannelCount = subChannelCount;
        rowreq_ctx->data.programID_len   = strlen(programID);

        if (sizeof(rowreq_ctx->data.programID) < rowreq_ctx->data.programID_len) {
            snmp_log(LOG_ERR, "not enough space for value\n");
            return MFD_ERROR;
        }
        
        memcpy(rowreq_ctx->data.programID, programID, rowreq_ctx->data.programID_len);
        rowreq_ctx->data.programID[rowreq_ctx->data.programID_len] = 0;

        // insert into table container
        CONTAINER_INSERT(container, rowreq_ctx);
    }

    DEBUGMSGT(("verbose:channelTable:channelTable_container_load",
               "inserted %d records\n", i));

    return MFD_SUCCESS;
}                               /* channelTable_container_load */

/**
 * container clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void
channelTable_container_free(netsnmp_container * container)
{
    UNUSED(container);
    DEBUGMSGTL(("verbose:channelTable:channelTable_container_free",
                "called\n"));

    /*
     * TODO:380:M: Free channelTable container data.
     */
}                               /* channelTable_container_free */

/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int
channelTable_row_prep(channelTable_rowreq_ctx * rowreq_ctx)
{
    DEBUGMSGTL(("verbose:channelTable:channelTable_row_prep", "called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:390:o: Prepare row for request.
     * If populating row data was delayed, this is the place to
     * fill in the row for this request.
     */

    return MFD_SUCCESS;
}                               /* channelTable_row_prep */

/** @} */
