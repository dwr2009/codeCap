/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 12088 $ of $ 
 *
 * $Id:$
 */
/*
 * standard Net-SNMP includes 
 */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/*
 * include our parent header 
 */
#include "channelTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement channelTable get routines.
 * TODO:240:M: Implement channelTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table channelTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * CE-SNMP-MIB::channelTable is subid 7 of tuner.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.38010.3.8.7, length: 10
 */

/*
 * ---------------------------------------------------------------------
 * * TODO:200:r: Implement channelTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param channelIndex_val
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
channelTable_indexes_set_tbl_idx(channelTable_mib_index * tbl_idx,
                                 long channelIndex_val)
{
    DEBUGMSGTL(("verbose:channelTable:channelTable_indexes_set_tbl_idx",
                "called\n"));

    /*
     * channelIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/a/w/e/R/d/h 
     */
    tbl_idx->channelIndex = channelIndex_val;


    return MFD_SUCCESS;
}                               /* channelTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
channelTable_indexes_set(channelTable_rowreq_ctx * rowreq_ctx,
                         long channelIndex_val)
{
    DEBUGMSGTL(("verbose:channelTable:channelTable_indexes_set",
                "called\n"));

    if (MFD_SUCCESS !=
        channelTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx,
                                         channelIndex_val))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if (0 != channelTable_index_to_oid(&rowreq_ctx->oid_idx,
                                       &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
}                               /* channelTable_indexes_set */

int
channelIndex_get(channelTable_rowreq_ctx * rowreq_ctx,
                  long *channelIndex_val_ptr)
{
   /** we should have a non-NULL pointer */
    netsnmp_assert(NULL != channelIndex_val_ptr);


    DEBUGMSGTL(("verbose:channelTable:channelIndex_get", "called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:231:o: |-> Extract the current value of the channelIndex data.
     * copy (* channelIndex_val_ptr ) from rowreq_ctx->data
     */
    (*channelIndex_val_ptr) = rowreq_ctx->data.channelIndex;

    return MFD_SUCCESS;
}

/*---------------------------------------------------------------------
 * CE-SNMP-MIB::tunerChannelEntry.channelNumber
 * channelNumber is subid 2 of tunerChannelEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.38010.3.8.7.1.2
 * Description:
The detected channel number.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  0 - 256;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the channelNumber data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param channelNumber_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
channelNumber_get(channelTable_rowreq_ctx * rowreq_ctx,
                  long *channelNumber_val_ptr)
{
   /** we should have a non-NULL pointer */
    netsnmp_assert(NULL != channelNumber_val_ptr);


    DEBUGMSGTL(("verbose:channelTable:channelNumber_get", "called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:231:o: |-> Extract the current value of the channelNumber data.
     * copy (* channelNumber_val_ptr ) from rowreq_ctx->data
     */
    (*channelNumber_val_ptr) = rowreq_ctx->data.channelNumber;

    return MFD_SUCCESS;
}                               /* channelNumber_get */

/*---------------------------------------------------------------------
 * CE-SNMP-MIB::tunerChannelEntry.subChannelCount
 * subChannelCount is subid 3 of tunerChannelEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.38010.3.8.7.1.3
 * Description:
The number of sub-channels supported by the channel.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  0 - 16;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the subChannelCount data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param subChannelCount_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
subChannelCount_get(channelTable_rowreq_ctx * rowreq_ctx,
                    long *subChannelCount_val_ptr)
{
   /** we should have a non-NULL pointer */
    netsnmp_assert(NULL != subChannelCount_val_ptr);


    DEBUGMSGTL(("verbose:channelTable:subChannelCount_get", "called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:231:o: |-> Extract the current value of the subChannelCount data.
     * copy (* subChannelCount_val_ptr ) from rowreq_ctx->data
     */
    (*subChannelCount_val_ptr) = rowreq_ctx->data.subChannelCount;

    return MFD_SUCCESS;
}                               /* subChannelCount_get */

/*---------------------------------------------------------------------
 * CE-SNMP-MIB::tunerChannelEntry.programID
 * programID is subid 4 of tunerChannelEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.38010.3.8.7.1.4
 * Description:
The list of program IDs supported by the channel.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  128;
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.  (Max 128)
 */
/**
 * Extract the current value of the programID data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param programID_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param programID_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by programID.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*programID_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update programID_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
programID_get(channelTable_rowreq_ctx * rowreq_ctx,
              char **programID_val_ptr_ptr,
              size_t *programID_val_ptr_len_ptr)
{
   /** we should have a non-NULL pointer and enough storage */
    netsnmp_assert((NULL != programID_val_ptr_ptr)
                   && (NULL != *programID_val_ptr_ptr));
    netsnmp_assert(NULL != programID_val_ptr_len_ptr);


    DEBUGMSGTL(("verbose:channelTable:programID_get", "called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:231:o: |-> Extract the current value of the programID data.
     * copy (* programID_val_ptr_ptr ) data and (* programID_val_ptr_len_ptr ) from rowreq_ctx->data
     */
    /*
     * make sure there is enough space for programID data
     */
    if ((NULL == (*programID_val_ptr_ptr)) ||
        ((*programID_val_ptr_len_ptr) < (rowreq_ctx->data.programID_len * sizeof(rowreq_ctx->data.programID[0])))) {
        /*
         * allocate space for programID data
         */
        (*programID_val_ptr_ptr) = (char *)malloc(rowreq_ctx->data.programID_len * sizeof(rowreq_ctx->data.programID[0]));
        if (NULL == (*programID_val_ptr_ptr)) {
            snmp_log(LOG_ERR, "could not allocate memory\n");
            return MFD_ERROR;
        }
    }
    (*programID_val_ptr_len_ptr) = rowreq_ctx->data.programID_len * sizeof(rowreq_ctx->data.programID[0]);
    memcpy((*programID_val_ptr_ptr), rowreq_ctx->data.programID,
           rowreq_ctx->data.programID_len * sizeof(rowreq_ctx->data.programID[0]));

    return MFD_SUCCESS;
}                               /* programID_get */



/** @} */
