/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.scalar.conf 17337 2009-01-01 14:28:29Z magfr $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <net/if.h>

#include <sys/ioctl.h>
#include <sys/socket.h>

#include "snmp_support.h"
#include "network.h"
#include "subagent.h"

static NetworkConfig config;

typedef enum {
    EnableDhcp, IPv4Addr, SubnetMask, Gateway, DomainName, Dns1, Dns2, SSID, Key, Channel, Security, KeyIndex, Type
} DBusWifiType;

int getNetworkDeviceHwAddr(const char *name, void *ptr)
{
    int sock, result = -1;
    struct ifreq ifr;

    sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock) {
        memset(&ifr, 0, sizeof(struct ifreq));
        strncpy(ifr.ifr_name, name, IFNAMSIZ);
        ifr.ifr_name[IFNAMSIZ - 1] = 0;

        result = ioctl(sock, SIOCGIFHWADDR, &ifr);
        if (result >= 0) {
            memcpy(ptr, &ifr.ifr_hwaddr.sa_data, ETH_ALEN);
            result = 0;
        }
        close(sock);
    }

    return result;
}

int ParseArgs(const char *pArgs, const char **pNextArgs,
			  char *pArgName, unsigned int iArgNameSize,
			  char *pArgVal, unsigned int iArgValSize)
{
	const char *pArg1, *pVal1;
	const char *pArg2, *pVal2;
	unsigned int length;

    if (!pArgs)
		return FALSE;
	
	// ArgName
    pArg1 = pArgs;
	pArg2 = strchr(pArg1, '=');
	if (!pArg2)
        return FALSE;
	length = pArg2 - pArg1;
	if (iArgNameSize < length + 1)
        return FALSE;
	strncpy(pArgName, pArg1, length);
	pArgName[length] = 0;

	// ArgVal
	pVal1 = pArg2 + 1;
	pVal2 = strchr(pVal1, '\n');
	if (!pVal2)
        return FALSE;
	length = pVal2 - pVal1;
	if (iArgValSize < length + 1)
        return FALSE;
	strncpy(pArgVal, pVal1, length);
	pArgVal[length] = 0;
	
	if (pNextArgs)
        *pNextArgs = pVal2 + 1;
	return TRUE;
}

int getNetworkInfo()
{
    NetworkConfig *cfg = &config;
    char szArgName[32], szArgVal[32];
    unsigned int length;
    const char* pVal;
    int ret;

    SPArgs args;
    args.eType = SPValue_String;
    args.pString = "ActionScope=Current";

    if (DBus_getProperty(SPBus_SystemService_NetworkManager, "getNetworkCfg", &args, 
                         DBUS_TYPE_INT32, &ret,
                         DBUS_TYPE_STRING, &pVal,
                         DBUS_TYPE_INVALID) != 0 || ret != 0) {
        return -1;
    }

    // samba
    strcpy(cfg->smb.user, "user");
    strcpy(cfg->smb.passwd, "passwd");
    strcpy(cfg->smb.sharename, "sharename");

    while (ParseArgs(pVal, &pVal,
                     szArgName, sizeof(szArgName),
                     szArgVal, sizeof(szArgVal))) 
    {
        if (!strncmp(szArgName, "EthIP", 5)) {
            inet_pton(AF_INET, szArgVal, &cfg->wired.ip_add);
        } else if (!strncmp(szArgName, "EthSubnetMask", 13)) {
            inet_pton(AF_INET, szArgVal, &cfg->wired.subnet);
        } else if (!strncmp(szArgName, "Gateway", 7)) {
            inet_pton(AF_INET, szArgVal, &cfg->wired.gateway);
        } else if (!strncmp(szArgName, "Dns1", 4)) {
            inet_pton(AF_INET, szArgVal, &cfg->wired.pri_dns);
        } else if (!strncmp(szArgName, "Dns2", 4)) {
            inet_pton(AF_INET, szArgVal, &cfg->wired.sec_dns);
        } else if (!strncmp(szArgName, "EthDhcp", 7)) {
            cfg->wired.dhcp_setting = (atoi(szArgVal) == 1) ? 1 : 0;
        } else if (!strncmp(szArgName, "DefEthDevName", 13)) {
            length = strlen(szArgVal);
            if (sizeof(cfg->wired.devName) > length) {
                memcpy(cfg->wired.devName, szArgVal, length);
                cfg->wired.devName[length] = 0;
            }
        } else if (!strncmp(szArgName, "DomainName", 13)) {
            length = strlen(szArgVal);
            if (sizeof(cfg->domainName) > length) {
                memcpy(cfg->domainName, szArgVal, length);
                cfg->domainName[length] = 0;
            }
        }
    }

    cfg->bInitialized = 1;
    return 0;
}
void update_wificfg()
{
	NetworkConfigCommit_TYPE eCmtType;
	char szCfg[256], szTmp[32];
	const char *pCfg;

    // Wifi
    sprintf(szCfg, "CommitType=%d\nWifiDhcp=%d", eCmtType, config.wifi.dhcp_setting);
    strcat(szCfg, "\nWifiIP=");
    strcat(szCfg, inet_ntoa(config.wifi.ip_add));
    strcat(szCfg, "\nWifiSubnetMask=");
    strcat(szCfg, inet_ntoa(config.wifi.subnet));
    strcat(szCfg, "\nWifiGateway=");
    strcat(szCfg, inet_ntoa(config.wifi.gateway));
    strcat(szCfg, "\nDns1=");
    strcat(szCfg, inet_ntoa(config.wifi.pri_dns));
    strcat(szCfg, "\nDns2=");
    strcat(szCfg, inet_ntoa(config.wifi.sec_dns));

    strcat(szCfg, "\nssid=");
    strcat(szCfg, config.wifiAp.ssid);
    strcat(szCfg, "\nkey=");
    strcat(szCfg, config.wifiAp.key);
    strcat(szCfg, "\n");
    sprintf(szTmp, "channel=%d\n", config.wifiAp.channel);
    strcat(szCfg, szTmp);
    sprintf(szTmp, "security=%d\n", config.wifiAp.security);
    strcat(szCfg, szTmp);
    sprintf(szTmp, "wepKeyIndex=%d\n", config.wifiAp.iWepKeyIndex);
    strcat(szCfg, szTmp);
    sprintf(szTmp, "type=%d\n", config.wifiAp.type);
    strcat(szCfg, szTmp);
    strcat(szCfg, "\n");
    pCfg = szCfg;
    DEBUGMSGTL(("Interface", "%s: cfg='%s'\n", __FUNCTION__, pCfg));

    if (DBus_setProperty(SPBus_SystemService_NetworkManager, "setWifiCfg", NULL,
                         DBUS_TYPE_STRING, &pCfg,
                         DBUS_TYPE_INVALID) != 0) {
        return ;
    }
}

int getWifiCfg()
{
    const char *value;
    int i, len, ret = 0;

    SPArgs args;
    args.eType = SPValue_Integer;
    for (i = 0; i <= Type; i++) {
        args.integer = i;
        if (DBus_getProperty(SPBus_SystemService_NetworkManager, "getWifiCfg", &args,
                             DBUS_TYPE_STRING, &value,
                             DBUS_TYPE_INT32, &ret,
                             DBUS_TYPE_INVALID) != 0) {
            ret = -1;
            break;
        }
        if (ret != 0) {
            ret = -1;
            break;
        }

        switch (i) {
        case EnableDhcp:
            config.wifi.dhcp_setting = (atoi(value) == 1) ? 1 : 0;
            break;
        case IPv4Addr:
            inet_aton(value, &config.wifi.ip_add);
            break;
        case SubnetMask:
            inet_aton(value, &config.wifi.subnet);
            break;
        case Gateway:
            inet_aton(value, &config.wifi.gateway);
            break;
        case DomainName:
            break;
        case Dns1:
            inet_aton(value, &config.wifi.pri_dns);
            break;
        case Dns2:
            inet_aton(value, &config.wifi.sec_dns);
            break;
        case SSID:
            len = sizeof(config.wifiAp.ssid) - 1;
            strncpy(config.wifiAp.ssid, value, sizeof(config.wifiAp.ssid) - 1);
            config.wifiAp.ssid[len] = '\0';
            break;
        case Key:
            len = sizeof(config.wifiAp.key) - 1;
            strncpy(config.wifiAp.key, value, sizeof(config.wifiAp.key) - 1);
            config.wifiAp.key[len] = '\0';
            break;
        case Channel:
            config.wifiAp.channel = atoi(value);
            break;
        case Security:
            config.wifiAp.security = atoi(value);
            break;
        case KeyIndex:
            config.wifiAp.iWepKeyIndex = atoi(value);
            break;
        case Type:
            config.wifiAp.type = atoi(value);
            break;
        default:
            ret = -1;
            break;
        }
    }
#if 0 // del by jaylon 
    if (ret == 0)
        config.bInitWifiCfg = 1;
#endif

    return ret;
}


/** Initializes the network module */
void
init_network()
{
    const oid       tnetIPAddress_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 1 };
    const oid       tnetSubnetAddress_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 2 };
    const oid       tnetGatewayAddress_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 3 };
    const oid       tnetPriDNS_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 4 };
    const oid       tnetSecDNS_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 5 };
    const oid       tnetDHCPEnable_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 6 };
    const oid       netCommit_oid[] = { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 7 };
    const oid       macAddress_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 8 };
    const oid       smbUser_oid[] = { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 9 };
    const oid       smbPassword_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 10 };
    const oid       smbMountShareName_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 11 };
    const oid       smbMountInitiate_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 12 };
    const oid       domainName_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 13 };
    const oid       tnetWirelessIPAddress_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 14 };
    const oid       tnetWirelessSubnetAddress_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 15 };
    const oid       tnetWirelessGatewayAddress_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 16 };
    const oid       tnetWirelessPriDNS_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 17 };
    const oid       tnetWirelessSecDNS_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 18 };
    const oid       tnetWirelessDHCPEnable_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 19 };
    const oid       tnetWirelessSSID_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 20 };
    const oid       tnetWirelessConnectionType_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 21 };
    const oid       tnetWirelessKey_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 22 };
    const oid       tnetWirelessChannel_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 23 };
    const oid       tnetWirelessChannelStrength_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 24 };
    const oid       tnetWirelessDomainName_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 25 };
    const oid       tnetWiredControl_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 26 };
    const oid       tnetWirelessControl_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 27 };
    const oid       tnetWirelessSecurity_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 28 };
    const oid       tnetWirelessWepKeyIndex_oid[] =
        { 1, 3, 6, 1, 4, 1, 38010, 3, 1, 29 };

    DEBUGMSGTL(("network", "Initializing\n"));

    memset(&config, 0, sizeof(config));

    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetIPAddress", handle_tnetIPAddress,
                             tnetIPAddress_oid,
                             OID_LENGTH(tnetIPAddress_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetSubnetAddress", handle_tnetSubnetAddress,
                             tnetSubnetAddress_oid,
                             OID_LENGTH(tnetSubnetAddress_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetGatewayAddress",
                             handle_tnetGatewayAddress,
                             tnetGatewayAddress_oid,
                             OID_LENGTH(tnetGatewayAddress_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetPriDNS", handle_tnetPriDNS,
                             tnetPriDNS_oid, OID_LENGTH(tnetPriDNS_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetSecDNS", handle_tnetSecDNS,
                             tnetSecDNS_oid, OID_LENGTH(tnetSecDNS_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetDHCPEnable", handle_tnetDHCPEnable,
                             tnetDHCPEnable_oid,
                             OID_LENGTH(tnetDHCPEnable_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("netCommit", handle_netCommit, netCommit_oid,
                             OID_LENGTH(netCommit_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("macAddress", handle_macAddress,
                             macAddress_oid, OID_LENGTH(macAddress_oid),
                             HANDLER_CAN_RONLY));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("smbUser", handle_smbUser, smbUser_oid,
                             OID_LENGTH(smbUser_oid), HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("smbPassword", handle_smbPassword,
                             smbPassword_oid, OID_LENGTH(smbPassword_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("smbMountShareName", handle_smbMountShareName,
                             smbMountShareName_oid,
                             OID_LENGTH(smbMountShareName_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("smbMountInitiate", handle_smbMountInitiate,
                             smbMountInitiate_oid,
                             OID_LENGTH(smbMountInitiate_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("domainName", handle_domainName,
                             domainName_oid, OID_LENGTH(domainName_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessIPAddress",
                             handle_tnetWirelessIPAddress,
                             tnetWirelessIPAddress_oid,
                             OID_LENGTH(tnetWirelessIPAddress_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessSubnetAddress",
                             handle_tnetWirelessSubnetAddress,
                             tnetWirelessSubnetAddress_oid,
                             OID_LENGTH(tnetWirelessSubnetAddress_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessGatewayAddress",
                             handle_tnetWirelessGatewayAddress,
                             tnetWirelessGatewayAddress_oid,
                             OID_LENGTH(tnetWirelessGatewayAddress_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessPriDNS",
                             handle_tnetWirelessPriDNS,
                             tnetWirelessPriDNS_oid,
                             OID_LENGTH(tnetWirelessPriDNS_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessSecDNS",
                             handle_tnetWirelessSecDNS,
                             tnetWirelessSecDNS_oid,
                             OID_LENGTH(tnetWirelessSecDNS_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessDHCPEnable",
                             handle_tnetWirelessDHCPEnable,
                             tnetWirelessDHCPEnable_oid,
                             OID_LENGTH(tnetWirelessDHCPEnable_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessSSID", handle_tnetWirelessSSID,
                             tnetWirelessSSID_oid,
                             OID_LENGTH(tnetWirelessSSID_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessConnectionType",
                             handle_tnetWirelessConnectionType,
                             tnetWirelessConnectionType_oid,
                             OID_LENGTH(tnetWirelessConnectionType_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessKey", handle_tnetWirelessKey,
                             tnetWirelessKey_oid,
                             OID_LENGTH(tnetWirelessKey_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessChannel",
                             handle_tnetWirelessChannel,
                             tnetWirelessChannel_oid,
                             OID_LENGTH(tnetWirelessChannel_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessChannelStrength",
                             handle_tnetWirelessChannelStrength,
                             tnetWirelessChannelStrength_oid,
                             OID_LENGTH(tnetWirelessChannelStrength_oid),
                             HANDLER_CAN_RONLY));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessDomainName",
                             handle_tnetWirelessDomainName,
                             tnetWirelessDomainName_oid,
                             OID_LENGTH(tnetWirelessDomainName_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWiredControl", handle_tnetWiredControl,
                             tnetWiredControl_oid,
                             OID_LENGTH(tnetWiredControl_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessControl",
                             handle_tnetWirelessControl,
                             tnetWirelessControl_oid,
                             OID_LENGTH(tnetWirelessControl_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessSecurity",
                             handle_tnetWirelessSecurity,
                             tnetWirelessSecurity_oid,
                             OID_LENGTH(tnetWirelessSecurity_oid),
                             HANDLER_CAN_RWRITE));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("tnetWirelessWepKeyIndex",
                             handle_tnetWirelessWepKeyIndex,
                             tnetWirelessWepKeyIndex_oid,
                             OID_LENGTH(tnetWirelessWepKeyIndex_oid),
                             HANDLER_CAN_RWRITE));
}

int
handle_tnetIPAddress(netsnmp_mib_handler *handler,
                     netsnmp_handler_registration *reginfo,
                     netsnmp_agent_request_info *reqinfo,
                     netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 &config.wired.ip_add, 4);
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wired.ip_add, requests->requestvb->val.string, 4);
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_tnetIPAddress\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetSubnetAddress(netsnmp_mib_handler *handler,
                         netsnmp_handler_registration *reginfo,
                         netsnmp_agent_request_info *reqinfo,
                         netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {

    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                  &config.wired.subnet, 4);
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wired.subnet, requests->requestvb->val.string, sizeof(config.wired.subnet));
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetSubnetAddress\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetGatewayAddress(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info *reqinfo,
                          netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 &config.wired.gateway, sizeof(config.wired.gateway));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wired.gateway, requests->requestvb->val.string,
               sizeof(config.wired.gateway));
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetGatewayAddress\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetPriDNS(netsnmp_mib_handler *handler,
                  netsnmp_handler_registration *reginfo,
                  netsnmp_agent_request_info *reqinfo,
                  netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 &config.wired.pri_dns, sizeof(config.wired.pri_dns));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wired.pri_dns, requests->requestvb->val.string, sizeof(config.wired.pri_dns));
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_tnetPriDNS\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetSecDNS(netsnmp_mib_handler *handler,
                  netsnmp_handler_registration *reginfo,
                  netsnmp_agent_request_info *reqinfo,
                  netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 &config.wired.sec_dns,
                                 sizeof(config.wired.sec_dns));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wired.sec_dns, requests->requestvb->val.string, sizeof(config.wired.sec_dns));
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_tnetSecDNS\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetDHCPEnable(netsnmp_mib_handler *handler,
                      netsnmp_handler_registration *reginfo,
                      netsnmp_agent_request_info *reqinfo,
                      netsnmp_request_info *requests)
{
    int ret, bDhcpEnable;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *) &config.wired.dhcp_setting,
                                 sizeof(config.wired.dhcp_setting));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        bDhcpEnable = *requests->requestvb->val.integer;
        if (bDhcpEnable != 0 && bDhcpEnable != 1) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
        config.wired.dhcp_setting = bDhcpEnable ? 1 : 0;
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_tnetDHCPEnable\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_netCommit(netsnmp_mib_handler *handler,
                 netsnmp_handler_registration *reginfo,
                 netsnmp_agent_request_info *reqinfo,
                 netsnmp_request_info *requests)
{
    NetworkConfigCommit_TYPE eCmtType;
    int ret = 0;
    char szCfg[256], szTmp[32];
    const char *pCfg;

    if (!config.bInitialized)
        getNetworkInfo();

    UNUSED(handler);
    UNUSED(reginfo);

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *)&ret, sizeof(ret));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        eCmtType = (typeof(typeof(eCmtType)))(*requests->requestvb->val.integer);
        if (eCmtType >= ACommit_TYPE_invalid) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);
            break;
        }

        if (eCmtType <= ACommit_TYPE_immediatelyNoSaveWired ) {
            // Eth
            sprintf(szCfg, "CommitType=%d\nEthDhcp=%d", eCmtType, config.wired.dhcp_setting);
            strcat(szCfg, "\nEthIP=");
            strcat(szCfg, inet_ntoa(config.wired.ip_add));
            strcat(szCfg, "\nEthSubnetMask=");
            strcat(szCfg, inet_ntoa(config.wired.subnet));
            strcat(szCfg, "\nGateway=");
            strcat(szCfg, inet_ntoa(config.wired.gateway));
            strcat(szCfg, "\nDns1=");
            strcat(szCfg, inet_ntoa(config.wired.pri_dns));
            strcat(szCfg, "\nDns2=");
            strcat(szCfg, inet_ntoa(config.wired.sec_dns));
            strcat(szCfg, "\n");
            pCfg = szCfg;
            DEBUGMSGTL(("Interface", "%s: cfg='%s'\n", __FUNCTION__, pCfg));

            if (DBus_setProperty(SPBus_SystemService_NetworkManager, "setNetworkCfg", NULL,
                                 DBUS_TYPE_STRING, &pCfg,
                                 DBUS_TYPE_INVALID) != 0) {
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);
                break;
            }

        } else {
            // Wifi
            sprintf(szCfg, "CommitType=%d\nWifiDhcp=%d", eCmtType, config.wifi.dhcp_setting);
            strcat(szCfg, "\nWifiIP=");
            strcat(szCfg, inet_ntoa(config.wifi.ip_add));
            strcat(szCfg, "\nWifiSubnetMask=");
            strcat(szCfg, inet_ntoa(config.wifi.subnet));
            strcat(szCfg, "\nWifiGateway=");
            strcat(szCfg, inet_ntoa(config.wifi.gateway));
            strcat(szCfg, "\nDns1=");
            strcat(szCfg, inet_ntoa(config.wifi.pri_dns));
            strcat(szCfg, "\nDns2=");
            strcat(szCfg, inet_ntoa(config.wifi.sec_dns));

            strcat(szCfg, "\nssid=");
            strcat(szCfg, config.wifiAp.ssid);
            strcat(szCfg, "\nkey=");
            strcat(szCfg, config.wifiAp.key);
            strcat(szCfg, "\n");
            sprintf(szTmp, "channel=%d\n", config.wifiAp.channel);
            strcat(szCfg, szTmp);
            sprintf(szTmp, "security=%d\n", config.wifiAp.security);
            strcat(szCfg, szTmp);
            sprintf(szTmp, "wepKeyIndex=%d\n", config.wifiAp.iWepKeyIndex);
            strcat(szCfg, szTmp);
            sprintf(szTmp, "type=%d\n", config.wifiAp.type);
            strcat(szCfg, szTmp);
            strcat(szCfg, "\n");
            pCfg = szCfg;
            DEBUGMSGTL(("Interface", "%s: cfg='%s'\n", __FUNCTION__, pCfg));

            if (DBus_setProperty(SPBus_SystemService_NetworkManager, "setWifiCfg", NULL,
                                 DBUS_TYPE_STRING, &pCfg,
                                 DBUS_TYPE_INVALID) != 0) {
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_netCommit\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_macAddress(netsnmp_mib_handler *handler,
                  netsnmp_handler_registration *reginfo,
                  netsnmp_agent_request_info *reqinfo,
                  netsnmp_request_info *requests)
{
    unsigned char hwaddr[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        getNetworkDeviceHwAddr((const char *)config.wired.devName, &hwaddr);
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR, (u_char *)&hwaddr, 6);
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_macAddress\n", reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_smbUser(netsnmp_mib_handler *handler,
               netsnmp_handler_registration *reginfo,
               netsnmp_agent_request_info *reqinfo,
               netsnmp_request_info *requests)
{
    int ret, val_len;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)&config.smb.user,
                                 strlen(config.smb.user));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        val_len = requests->requestvb->val_len;
        if ( val_len > SMB_USER_LEN || val_len < 0 ) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGLENGTH);
            break;
        }
        memcpy(&config.smb.user, requests->requestvb->val.string, val_len);
        config.smb.user[val_len] = 0;
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_smbUser\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_smbPassword(netsnmp_mib_handler *handler,
                   netsnmp_handler_registration *reginfo,
                   netsnmp_agent_request_info *reqinfo,
                   netsnmp_request_info *requests)
{
    int ret, val_len;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)&config.smb.passwd,
                                 strlen(config.smb.passwd));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        val_len = requests->requestvb->val_len;
        if (val_len > SMB_PASSWORD_LEN || val_len < 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGLENGTH);
            break;
        }
        memcpy(&config.smb.passwd, requests->requestvb->val.string, val_len);
        config.smb.passwd[val_len] = 0;
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_smbPassword\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_smbMountShareName(netsnmp_mib_handler *handler,
                         netsnmp_handler_registration *reginfo,
                         netsnmp_agent_request_info *reqinfo,
                         netsnmp_request_info *requests)
{
    int ret, val_len;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)&config.smb.sharename, 
                                 strlen(config.smb.sharename));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        val_len = requests->requestvb->val_len;
        if (val_len > SMB_SHARE_LEN || val_len < 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGLENGTH);
            break;
        }
        memcpy(&config.smb.sharename, requests->requestvb->val.string, val_len);
        config.smb.sharename[val_len] = 0;
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_smbMountShareName\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_smbMountInitiate(netsnmp_mib_handler *handler,
                        netsnmp_handler_registration *reginfo,
                        netsnmp_agent_request_info *reqinfo,
                        netsnmp_request_info *requests)
{
    int ret, bMount;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *)&config.smb.mountInitiate, sizeof(config.smb.mountInitiate));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        bMount = *requests->requestvb->val.integer;
        if (bMount != 0 && bMount != 1) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
        config.smb.mountInitiate = bMount ? 1 : 0;
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_smbMountInitiate\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_domainName(netsnmp_mib_handler *handler,
                  netsnmp_handler_registration *reginfo,
                  netsnmp_agent_request_info *reqinfo,
                  netsnmp_request_info *requests)
{
    int ret;
    unsigned int val_len;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)&config.domainName, 
                                 strlen((const char *)config.domainName));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        val_len = requests->requestvb->val_len;
        if (val_len + 1 > sizeof(config.domainName)) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGLENGTH);
            break;
        }
        if (val_len == 1 && requests->requestvb->val.string[0] == ' ') {
            config.domainName[0] = 0;
        } else {
            memcpy(config.domainName, requests->requestvb->val.string, val_len);
            config.domainName[val_len] = 0;
        }
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_domainName\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessIPAddress(netsnmp_mib_handler *handler,
                             netsnmp_handler_registration *reginfo,
                             netsnmp_agent_request_info *reqinfo,
                             netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 (u_char *)&config.wifi.ip_add,
                                 sizeof(config.wifi.ip_add));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wifi.ip_add, requests->requestvb->val.string,
               sizeof(config.wifi.ip_add));
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessIPAddress\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessSubnetAddress(netsnmp_mib_handler *handler,
                                 netsnmp_handler_registration *reginfo,
                                 netsnmp_agent_request_info *reqinfo,
                                 netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 (u_char *)&config.wifi.subnet,
                                 sizeof(config.wifi.subnet));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wifi.subnet, requests->requestvb->val.string,
               sizeof(config.wifi.subnet));
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessSubnetAddress\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessGatewayAddress(netsnmp_mib_handler *handler,
                                  netsnmp_handler_registration *reginfo,
                                  netsnmp_agent_request_info *reqinfo,
                                  netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 (u_char *)&config.wifi.gateway,
                                 sizeof(config.wifi.gateway));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wifi.gateway, requests->requestvb->val.string,
               sizeof(&config.wifi.gateway));
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessGatewayAddress\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessPriDNS(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info *reqinfo,
                          netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 (u_char *)&config.wifi.pri_dns,
                                 sizeof(config.wifi.pri_dns));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wifi.pri_dns, requests->requestvb->val.string,
               sizeof(config.wifi.pri_dns));
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessPriDNS\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessSecDNS(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info *reqinfo,
                          netsnmp_request_info *requests)
{
    int ret;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_IPADDRESS,
                                 (u_char *)&config.wifi.sec_dns,
                                 sizeof(config.wifi.sec_dns));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_IPADDRESS);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        memcpy(&config.wifi.sec_dns, requests->requestvb->val.string,
               sizeof(config.wifi.sec_dns));
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessSecDNS\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessDHCPEnable(netsnmp_mib_handler *handler,
                              netsnmp_handler_registration *reginfo,
                              netsnmp_agent_request_info *reqinfo,
                              netsnmp_request_info *requests)
{
    int ret, bDhcp;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *)&config.wifi.dhcp_setting,
                                 sizeof(config.wifi.dhcp_setting));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        bDhcp = *requests->requestvb->val.integer;
        if (bDhcp != 0 && bDhcp != 1) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
        config.wifi.dhcp_setting = bDhcp;
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessDHCPEnable\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessSSID(netsnmp_mib_handler *handler,
                        netsnmp_handler_registration *reginfo,
                        netsnmp_agent_request_info *reqinfo,
                        netsnmp_request_info *requests)
{
    int ret, val_len;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)&config.wifiAp.ssid,
                                 strlen(config.wifiAp.ssid));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        val_len = requests->requestvb->val_len;
        if (val_len > IW_ESSID_MAX_SIZE) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGLENGTH);
            break;
        }
        memcpy(&config.wifiAp.ssid, requests->requestvb->val.string, val_len);
        config.wifiAp.ssid[val_len] = 0;
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_tnetWirelessSSID\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessConnectionType(netsnmp_mib_handler *handler,
                                  netsnmp_handler_registration *reginfo,
                                  netsnmp_agent_request_info *reqinfo,
                                  netsnmp_request_info *requests)
{
    int ret, temp;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *)&config.wifiAp.type,
                                 sizeof(config.wifiAp.type));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        temp = *requests->requestvb->val.integer;
        if (temp != 0 && temp != 1) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
        // Infrastructure(0) and Ad-Hoc(1)
        config.wifiAp.type = temp;
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessConnectionType\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessKey(netsnmp_mib_handler *handler,
                       netsnmp_handler_registration *reginfo,
                       netsnmp_agent_request_info *reqinfo,
                       netsnmp_request_info *requests)
{
    int ret, val_len;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)config.wifiAp.key,
                                 strlen(config.wifiAp.key));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        val_len = requests->requestvb->val_len;
        if (requests->requestvb->val_len > IW_ENCODING_TOKEN_MAX) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGLENGTH);
            break;
        }
        memcpy(&config.wifiAp.key, requests->requestvb->val.string, val_len);
        config.wifiAp.key[val_len] = 0;
			update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_tnetWirelessKey\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessChannel(netsnmp_mib_handler *handler,
                           netsnmp_handler_registration *reginfo,
                           netsnmp_agent_request_info *reqinfo,
                           netsnmp_request_info *requests)
{
    int ret, channel;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *)&config.wifiAp.channel,
				 sizeof(config.wifiAp.channel));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        channel = *requests->requestvb->val.integer;
        if (channel < 0 || channel > WIRELESS_CHAN_MAX) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
        config.wifiAp.channel = channel;
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessChannel\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessChannelStrength(netsnmp_mib_handler *handler,
                                   netsnmp_handler_registration *reginfo,
                                   netsnmp_agent_request_info *reqinfo,
                                   netsnmp_request_info *requests)
{
    int ret, value;

    UNUSED(handler);
    UNUSED(reginfo);
    UNUSED(requests);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {

    case MODE_GET:
        if (DBus_getProperty(SPBus_SystemService_NetworkManager, "getWifiSignalLevel", NULL,
                             DBUS_TYPE_INT32, &ret,
                             DBUS_TYPE_INT32, &value,
                             DBUS_TYPE_INVALID) != 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);
            break;
        }
        if (ret != 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_NOSUCHOBJECT);
            break;
        }
        DEBUGMSGTL(("Interface", "%s: getInt='%d'\n", __FUNCTION__, value));
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *)&value, sizeof(value));
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessChannelStrength\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessDomainName(netsnmp_mib_handler *handler,
                              netsnmp_handler_registration *reginfo,
                              netsnmp_agent_request_info *reqinfo,
                              netsnmp_request_info *requests)
{
    int ret, val_len;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)&config.wifi.devName, 
                                 strlen((const char *)config.wifi.devName));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        val_len = requests->requestvb->val_len;
        if (val_len > 47) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGLENGTH);
            break;
        }
        memcpy(&config.wifi.devName, requests->requestvb->val.string, val_len);
        config.wifi.devName[val_len] = 0;
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessDomainName\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWiredControl(netsnmp_mib_handler *handler,
                        netsnmp_handler_registration *reginfo,
                        netsnmp_agent_request_info *reqinfo,
                        netsnmp_request_info *requests)
{
    int ret;
    static int bEnable = 1;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitialized)
        getNetworkInfo();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *) &bEnable,
                                 sizeof(bEnable));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        bEnable = *requests->requestvb->val.integer;
        if (bEnable != 0 && bEnable != 1) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
#if 0
        DEBUGMSGTL(("Interface", "%s: setInt='%d'\n", __FUNCTION__, bEnable));
        if (DBus_setProperty(SPBus_MPlayer, "setTnetWiredControl", NULL,
                             DBUS_TYPE_INT32, &bEnable,
                             DBUS_TYPE_INVALID) != 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);
            break;
        }
#endif
        config.wired.control = bEnable;
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_tnetWiredControl\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessControl(netsnmp_mib_handler *handler,
                           netsnmp_handler_registration *reginfo,
                           netsnmp_agent_request_info *reqinfo,
                           netsnmp_request_info *requests)
{
    int ret, value;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        if (DBus_getProperty(SPBus_SystemService_NetworkManager, "getWifiStatus", NULL,
                             DBUS_TYPE_INT32, &ret,
                             DBUS_TYPE_INT32, &value,
                             DBUS_TYPE_INVALID) != 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);
            break;
        }
        if (ret != 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_NOSUCHOBJECT);
            break;
        }
        DEBUGMSGTL(("Interface", "%s: getInt='%d'\n", __FUNCTION__, value));

        config.wifi.control = value;
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *)&config.wifi.control, sizeof(config.wifi.control));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        value = *requests->requestvb->val.integer;
        if (value != 0 && value != 1) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
#if 0
        // We shouldn't disable both interfaces
        if (value == 0 && config.wired.control == 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
#endif
        DEBUGMSGTL(("Interface", "%s: setInt='%d'\n", __FUNCTION__, value));
        if (DBus_setProperty(SPBus_SystemService_NetworkManager, "setWifiStatus", NULL,
                             DBUS_TYPE_INT32, &value,
                             DBUS_TYPE_INVALID) != 0) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);
            break;
        }
        config.wifi.control = value;
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessControl\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessSecurity(netsnmp_mib_handler *handler,
                            netsnmp_handler_registration *reginfo,
                            netsnmp_agent_request_info *reqinfo,
                            netsnmp_request_info *requests)
{
    int ret, temp;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *) &config.wifiAp.security,
                                 sizeof(config.wifiAp.security));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        temp = *requests->requestvb->val.integer;
        if (temp < 0 || temp > WIRELESS_SEC_MAX) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
        config.wifiAp.security = temp;
		update_wificfg();
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_tnetWirelessSecurity\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_tnetWirelessWepKeyIndex(netsnmp_mib_handler *handler,
                               netsnmp_handler_registration *reginfo,
                               netsnmp_agent_request_info *reqinfo,
                               netsnmp_request_info *requests)
{
    int ret, iIndex;

    UNUSED(handler);
    UNUSED(reginfo);

    if (!config.bInitWifiCfg)
        getWifiCfg();

    switch (reqinfo->mode) {
    case MODE_GET:
        snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                 (u_char *) &config.wifiAp.iWepKeyIndex,
                                 sizeof(config.wifiAp.iWepKeyIndex));
        break;

    case MODE_SET_RESERVE1:
        ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
        if (ret != SNMP_ERR_NOERROR) {
            netsnmp_set_request_error(reqinfo, requests, ret);
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        iIndex = *requests->requestvb->val.integer;
        if (iIndex < 0 || iIndex > 3) {
            netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_WRONGVALUE);
            break;
        }
        config.wifiAp.iWepKeyIndex = iIndex;
        break;

    case MODE_SET_COMMIT:
        break;

    case MODE_SET_UNDO:
        break;

    default:
        snmp_log(LOG_ERR, "unknown mode (%d) in handle_tnetWirelessSecurity\n", reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

