#ifndef _MEDIA_VOLUME_H
#define _MEDIA_VOLUME_H
#include <BaseTypeDef.h>
#include "nexus_audio_types.h"
#include "nxclient_global.h"


#if 0 /*broadcom*/
static UINT32_t VolumeTable[] = {
	0x0,		0x1,		0x1,		0x1,		
	0x1,		0x1,		0x1,		0x1,		0x2,
	0x2,		0x2,		0x2,		0x3,		0x3,
	0x4,		0x4,		0x5,		0x5,		0x6,
	0x7,		0x8,		0x9,		0xA,		0xB,
	0xD,		0xE,		0x10,		0x12,		0x15,								
	0x17,		0x1A,		0x1D,		0x21,		0x25,								
	0x2A,		0x2F,		0x34,		0x3B,		0x42,								
	0x4A, 		0x53,		0x5E,		0x69,		0x76,								
	0x84,		0x95,		0xA7,		0xD2,		0xEC,								
	0x129,		0x14D,		0x176,		0x1A4,		0x1D7,								
	0x211,		0x251,		0x29A,		0x2EB,		0x346,	
	0x3AD,		0x420,		0x4A0,		0x531,		0x5D3,	
	0x689,		0x755,		0x83B,		0x93C,		0xA5C,
	0xBA0,		0xD0B,		0xEA3,		0x106C,		0x126D,	
	0x14AC,		0x1732,		0x1A07,		0x1D34,		0x20C4,	
	0x24C4,		0x2940,		0x2E49,		0x33EF,		0x3A45,	
	0x4161,		0x495B,		0x524F,		0x5C5A,		0x679F,		
	0x7443,		0x8273,		0x925E,		0xA43A,		0xB844,		
	0xCEC0,		0xE7FA,		0x10449,	0x1240B,	0x147AE,
	0x16FA9,	0x19C86,	0x1CEDC,	0x20756,	0x246B4,	
	0x28DCE,	0x2DD95,	0x33718,	0x39B87,	0x40C37,
	0x48AA7,	0x51884,	0x5B7B1,	0x66A4A,	0x732AE,	
	0x81385,	0x90FCB,	0xA2ADA,	0xB6873,	0xCCCCC,	
	0xE5CA1,	0x101D3F,	0x12149A,	0x144960,	0x16C310,	
	0x198A13,	0x1CA7D7,	0x2026F3,	0x241346,	0x287A26,	
	0x2D6A86,	0x32F52C,	0x392CED,	0x4026E7,	0x47FACC,				
	0x50C335,	0x5A9DF7,	0x65AC8C,	0x721482,	0x800000			    
};

#endif

#if 0 /*sigmal*/
static UINT32_t VolumeTable[] = {
	0x00000000,								// mute
	0x00100000, 0x0011f59c, 0x001428a4, 0x0016a09f, 0x001965ff, 0x001c823e, // -48dB ... -43dB
	0x00200000, 0x0023eb35, 0x00285145, 0x002d413c, 0x0032cbfc, 0x0039047b, // -42dB ... -37dB
	0x00400000, 0x0047d66a, 0x0050a28b, 0x005a8279, 0x006597fa, 0x007208f8, // -36dB ... -31dB
	0x00800000, 0x008facd6, 0x00a14518, 0x00b504f3, 0x00cb2ff5, 0x00e411f0, // -30dB ... -25dB
	0x01000000, 0x011f59ac, 0x01428a2f, 0x016a09e6, 0x01965fea, 0x01c823e0, // -24dB ... -19dB
	0x02000000, 0x023eb358, 0x0285145f, 0x02d413cd, 0x032cbfd5, 0x039047c1, // -18dB ... -13dB
	0x04000000, 0x047d66b1, 0x050a28be, 0x05a82799, 0x06597fa9, 0x07208f82, // -12dB ...  -7dB
	0x08000000, 0x08facd62, 0x0a14517d, 0x0b504f34, 0x0cb2ff53, 0x0e411f04, //  -6dB ...  -1dB
	0x10000000, 0x11f59ac4, 0x1428a2fa, 0x16a09e67, 0x1965fea6, 0x1c823e08, //   0dB ...   5dB
	0x20000000, 0x23eb3589, 0x285145f5, 0x2d413ccf, 0x32cbfd4c, 0x39047c10, //   6dB ...  11dB
	0x40000000, 0x47d66b10, 0x50a28be7, 0x5a82799a, 0x6597fa95, 0x7208f81d, //  12dB ...  17dB
	0x80000000, 0x8CCD383A, 0x9E0B641C, 0xADC74FDB, 0xBCF6D72D, 0xCD43582D, //  18dB ...  23dB
	0xD9999998  // ~24dB
};
#endif


#if 1 
static UINT32_t VolumeTable[] = {
	0x0,
	0x16FA9,	0x1CEDC,	0x20756,	0x22756,	0x246B4,	0x266B4,	
	0x28DCE,	0x2DD95,	0x33718,	0x39B87,	0x40C37,	0x44C37,
	0x48AA7,	0x51884,	0x5B7B1,	0x66A4A,	0x732AE,	0x752AE,	
	0x81385,	0x90FCB,	0xA2ADA,	0xB6873,	0xCCCCC,	0xDDDDD,	
	0xE5CA1,	0x101D3F,	0x111D3F,	0x12149A,	0x144960,	0x16C310,	
	0x18C310,	0x198A13,	0x1A8A13,	0x1CA7D7,	0x1DA7D7,	0x2026F3,	
	0x2226F3,	0x241346,	0x2626F3,	0x287A26,	0x2A7A26,	0x2B7A26,	
	0x2D6A86,	0x30F52C,	0x32F52C,	0x34F52C,	0x35F52C,	0x36F52C,	
	0x38F52C,	0x392CED,	0x4026E7,	0x42F52C,	0x45F52C,	0x47FACC,	
	0x49FACC,	0x50C335,	0x52F52C,	0x54F52C,	0x56F52C,	0x58F52C,
	0x5A9DF7,	0x5CF52C,	0x5EF52C,	0x60AC8C,	0x62AC8C,	0x65AC8C,	
	0x67AC8C,	0x69AC8C,	0x721482,	0x751482,	0x77AC8C,	0x781482,	
	0x800000		    
};
#endif

class CAudioVolumeExt
{
public:
    CAudioVolumeExt(void) :
        m_volumeType(NEXUS_AudioVolumeType_eLinear),
        m_left(NEXUS_AUDIO_VOLUME_LINEAR_MIN ),
        m_right(NEXUS_AUDIO_VOLUME_LINEAR_MIN ),
        m_muted(false) {}

public:
    NEXUS_AudioVolumeType m_volumeType;
    int32_t               m_left;
    int32_t               m_right;
    bool                  m_muted;
};

typedef enum
{
	ChangeLeftVolume=1,
	ChangeRightVolume=2,
	ChangeBothVolume=3,
}CHANGE_VOLUME_DIRECTION,*P_CHANGE_VOLUME_DIRECTION;



INT_t GetVolumeTableIndexSize();
INT_t GetVolumeVal(INT_t idVolume);
INT_t getPercentFromVolVal(INT_t uiVolVal);
INT_t getVolValFromPercent(INT_t iVolPercent);
INT_t getVolumeLevel(CAudioVolumeExt& ChAudioVolume );
INT_t setVolumeLevel(CAudioVolumeExt& ChAudioVolume );




#endif

